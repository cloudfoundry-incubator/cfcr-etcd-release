#!/bin/bash

set -euo pipefail
source /var/vcap/jobs/etcd/bin/utils.sh

alias etcdctl="/var/vcap/jobs/etcd/bin/etcdctl"
export ETCDCTL_API=3

# We support transitioning to this etcd release from an existing 1 node
# cluster. This block checks the peer url and updates it to the correct DNS
# address. This covers upgrading from non-alias'd clusters to alias'd clusters.

update_peer_url_to_correct_dns_address() {
  if ! etcdctl member list | grep "${etcd_peer_address}"; then
    member_id="$(etcdctl member list | grep "<%= spec.id %>" | cut -d',' -f1)"

    echo "Updating Member (${member_id}) peer url"

    etcdctl member update "${member_id}" --peer-urls "${etcd_peer_address}"
  fi
}

setup_users_auth() {
  <% if_p('users') do |users| %>
    <% users.each do |user| %>
      username="<%= user.name %>"
      password="<%= user.password %>"
      ## Root user is first parsed
      if [ "$username" == root ]; then
        export ROOT_PASSWORD=$password

        if [[ "$($etcdctl --user root:$ROOT_PASSWORD user get root)" =~ ".*user name not found.*" ]]; then
          $etcdctl --user root:$ROOT_PASSWORD add root:$ROOT_PASSWORD --interactive=false
        fi

        $etcdctl --user root:$ROOT_PASSWORD auth enable
      else
        is_prefix="<%= user.perfix %>"
        permission="<%= user.permission %>"
        path="<%= user.path %>"
        role="${username}-role"

        setup_user_auth "$username" "$password" "$is_prefix" "$permission" "$path" "$role"
      fi
    <% end %>
  <% end %>
}

setup_user_auth() {
  username=$1
  password=$2
  is_prefix=$3
  permission=$4
  path=$5
  role=$6

  ## cleanup old user and roles
  cleanup_old_user_and_role $username $role

  ## add user
  $etcdctl --user root:$ROOT_PASSWORD user add $username:$password --interactive=false
  $etcdctl --user root:$ROOT_PASSWORD role add $role
  $etcdctl --user root:$ROOT_PASSWORD role grant-permission $role --prefix=$is_prefix "$permission" "$path"
  $etcdctl --user root:$ROOT_PASSWORD user grant-role $username $role
}

cleanup_old_user_and_role() {
  username=$1
  role=$2

  echo "Check if username exsit"
  if ! [[ "$($etcdctl --user root:$ROOT_PASSWORD user get $username)" =~ ".*user name not found.*" ]]; then
    echo  "Delete old user"
    $etcdctl --user root:$ROOT_PASSWORD user delete $username
  fi

  echo "Check if role exsit"
  if ! [[ "$($etcdctl --user root:$ROOT_PASSWORD role get $role)" =~ ".*role name not found.*" ]]; then
    echo  "Delete old role"
    $etcdctl --user root:$ROOT_PASSWORD role delete $role
  fi
}


main() {
  timeout 120 /var/vcap/jobs/etcd/bin/ensure-member-healthy
  update_peer_url_to_correct_dns_address
  setup_users_auth
}

main $@
